
//This is here to keep the ready from firing before dynamically defined
//Javascript loads

$.holdReady( true );


/* This must load after JQuery */

/*!
 * jQuery htmlDoc "fixer" - v0.2pre - 8/8/2011
 * http://benalman.com/projects/jquery-misc-plugins/
 *
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
 
(function($) {
  // RegExp that matches opening and closing browser-stripped tags.
  // $1 = slash, $2 = tag name, $3 = attributes
  var matchTag = /<(\/?)(html|head|body|title|base|meta)(\s+[^>]*)?>/ig;
  // Unique id prefix for selecting placeholder elements.
  var prefix = 'hd' + +new Date;
  // A node under which a temporary DOM tree can be constructed.
  var parent;
	
  $.htmlDoc = function(html) {
		
    // A collection of "intended" elements that can't be rendered cross-browser
    // with .innerHTML, for which placeholders must be swapped.
    var elems = $();
    // Input HTML string, parsed to include placeholder DIVs. Replace HTML,
    // HEAD, BODY tags with DIV placeholders.
	
//	console.log("html original : "+html)
	
    var htmlParsed = html.replace(matchTag, function(tag, slash, name, attrs) {
      // Temporary object in which to hold attributes.
      var obj = {};
      // If this is an opening tag...
      if ( !slash ) {
        // Add an element of this name into the collection of elements. Note
        // that if a string of attributes is added at this point, it fails.
        elems = elems.add('<' + name + '/>');
        // If the original tag had attributes, create a temporary div with
        // those attributes. Then, copy each attribute from the temporary div
        // over to the temporary object.
        if ( attrs ) {
          $.each($('<div' + attrs + '/>')[0].attributes, function(i, attr) {				
            obj[attr.name] = attr.value;
          });
        }
        // Set the attributes of the intended object based on the attributes
        // copied in the previous step.
        elems.eq(-1).attr(obj);
      }
      // A placeholder div with a unique id replaces the intended element's
      // tag in the parsed HTML string.
      return '<' + slash + 'div'
        + (slash ? '' : ' id="' + prefix + (elems.length - 1) + '"') + '>';
    });

    // If no placeholder elements were necessary, just return normal
    // jQuery-parsed HTML.
    if ( !elems.length ) {
      return $(html);
    }
    // Create parent node if it hasn't been created yet.
    if ( !parent ) {
      parent = $('<div/>');
    }
    // Create the parent node and append the parsed, place-held HTML.
    parent.html(htmlParsed);
    // Replace each placeholder element with its intended element.
    $.each(elems, function(i) {
      var elem = parent.find('#' + prefix + i).before(elems[i]);
      elems.eq(i).html(elem.contents());
      elem.remove();
    });
    // Return the topmost intended element(s), sans text nodes, while removing
    // them from the parent element with unwrap.
    return parent.children().unwrap();
  };

}(jQuery));


// Copy all atributes over for elements
(function($) {
    // Attrs
    $.fn.attrs = function(attrs) {
        var t = $(this);
        if (attrs) {
            // Set attributes
            t.each(function(i, e) {
                var j = $(e);
                for (var attr in attrs) {
                    j.attr(attr, attrs[attr]);
                };
            });
            return t;
        } else {
            // Get attributes
            var a = {},
                r = t.get(0);
            if (r) {
                r = r.attributes;
                for (var i in r) {
                    var p = r[i];

					if (typeof p.value !== 'undefined') a[p.nodeName] = p.value;
                }
            }
            return a;
        }
    };
})(jQuery);


/***************/


var SUB_GLB = {
	SYS_DIR: "sys",
	DB_SYS: "S_",
	DB_USR: "U_",
	APPURL: "/pkg",
	LOCALSRC: "localsrc",
	LOCAL: "local",
	callbackdb: {},
	callkey: null,
	useRTC: true
};


function initall(apath, subname){
	
	Subcon.subrtc.default = new Subcon(apath);
	Subcon.subrtc.default.peerServerOn(subname);
}


function Subcon(apath){
	
	var pathary = splitpath(apath);
	
	this.appPath = pathary[0] + "/" + pathary[1];
	this.appName = pathary[1];

	this.dbname = this.getdbname();
	
	this.subName = null;
	this.peer = null
	this.conn = null;
	this.rcvbuffer = {};

	this.filecnt = 0;
	this.loadPath = null;
}


Subcon.subrtc = {default : null};


Subcon.prototype.peerServerOn = function(subname, loadpath) {
	
	var self = this;
	
	this.subName = subname;
	
	if (loadpath == null) {
		this.loadPath = this.fullPath(this.appName.toLowerCase()) + ".html"
	} else {
		this.loadPath = loadpath;
	}
	
	if (subname == SUB_GLB.LOCAL) {
		this.peer = Subcon.subrtc.default.peer;
		this.conn = Subcon.subrtc.default.conn;
		this.callServer();
		return;
	}
	
	$.ajax({
	  type: "POST",
	  url: "https://service.xirsys.com/ice",
	  data: {

	    ident: "markkudlac",
	    secret: "10633c0a-fb06-4502-a834-de7d1990c3e6",
	    domain: "subsect.net",
	    application: "subserver",
	    room: "default",
	
	    /*
	    ident: "rosemaryp",
	    secret: "ddb1722f-43ca-4a52-9eed-449875634cc9",
	    domain: "www.adladl.com",
	    application: "subserv",
	    room: "room-1",
			*/
	    secure: 1,
		timeout: 600
	  },
	  success: function (data, dstatus) {
		  console.log("XirSys ajax status : " + dstatus);
		self.peerClientOn(subname, "", data.d);
	  },
	  error: function() {
	    console.log("ERROR  XirSys");
		self.peerClientOn(subname, "", null);	//use Google default
	  }
	});
}



Subcon.prototype.peerClientOn = function(subname, peerid, customConfig){
	
	var opts = {key: 'wcf528rijzx8byb9',
				debug: 3
				};
						
	if (customConfig != null) opts.config = customConfig;
		
	var self = this;								
	this.peer = new Peer(opts);
	
		this.peer.on('open', function(id) {
			
			if (peerid.length <= 0) {

				var hostarg = location.host.replace(":3030", ":3000");	// for local testing with node server
				
				$.getJSON("http://" + hostarg +"/api/getrtcid/"+subname,
    		function(rtnobj){
    			if (rtnobj.rtn !== false) {
						if (rtnobj.status == "A") {
    					self.makeConnection(rtnobj.rtcid)
						} else {
							self.peerShutDown();
							clearspinner();
							alert(subname + " : Is not available currently")
						}
    			} else {
						self.peerShutDown();
						clearspinner();
    				alert("Peer id not found");
    			}
  			})
  			.fail(function(xhr, text){
					self.peerShutDown();
					clearspinner();
    			alert("Server call failed : " + text);
  			});
			} else {
				self.makeConnection(peerid);
			}
		});
		
		this.peer.on('error', function(err) {
			  alert('Peer client ERROR : ' + err.type + " : " + err.message);
			});
			
	  this.peer.on('disconnect', function() {
			alert('Peer client Disconnect event');
		});
}


Subcon.prototype.makeConnection = function(peerid){
	
	this.conn = this.peer.connect(peerid, {reliable: true});
	this.conn.on('disconected', function(){
		alert("Peer.connect DISCONNECTED");
	});
	
	this.conn.on('error', function(err){
		alert("Peer connect ERROR event : " + err.type + " : " + err.message);
	});
	this.callServer()
}


Subcon.prototype.peerShutDown = function(){
	if (this.peer != null) {
	        this.peer.disconnect();
	        this.peer.destroy();
	}
	this.peer = null;
}


Subcon.prototype.callServer = function() {
	
	var rcvhtml = null;
	var headflg = false
	var self = this;
	
	if (this.subName == SUB_GLB.LOCAL){
  	  console.log("Call for app LOCAL : "+ self.loadPath);
  		self.conn.send(xhrCall(self.loadPath));
		return
	}
	
	this.conn.on('open', function() {
	  // Receive messages
	  self.conn.on('data', function(data) {
			
			var xblob;

			if (data.cnt == 0){
				xblob = new Blob([ new Uint8Array(data.blob) ], {type : data.blobtype});
			} else {
				if (data.cnt == 1) {
					self.rcvbuffer[data.uri] = {type: data.blobtype, block: []};
				}
				self.rcvbuffer[data.uri].block[data.cnt -  1] = new Uint8Array(data.blob);
				
				if (data.cnt == -1) {
					buflen = self.rcvbuffer[data.uri].block.length;  //add last block in
					self.rcvbuffer[data.uri].block[buflen] = new Uint8Array(data.blob);
					
					xblob = new Blob(self.rcvbuffer[data.uri].block, {type : data.blobtype});
			console.log("In data last block : " + data.cnt + "  blobsize : " +
					self.rcvbuffer[data.uri].block[0].length + " uri  " + data.uri);
				} else {
					console.log("In data loop : " + data.cnt + "  blobsize : " +
							self.rcvbuffer[data.uri].block[0].length);
							
					self.conn.send(xhrCall(data.uri, null, data.cnt));
					
					if (data.blobtype.indexOf("audio") == 0) {
						self.driveStream()
					}
					return
				}
			}
			
			self.processBlob(data, xblob);			
	  });

	  // Send messages
	  console.log("Call for app : "+ self.loadPath);
	  self.conn.send(xhrCall(self.loadPath));
		});
}	

	
Subcon.prototype.processBlob = function(data, xblob){
	//console.log("processBlob all uri : " + data.uri + "  Type : "+ xblob.type);
	
	var self = this;
	
	if (data.uri.indexOf('api/') >= 0 ){
	
	//			console.log("api blob type : " + xblob.type);
		var reader = new FileReader();
		reader.onload = function(){
		
			var xread = JSON.parse(reader.result)
			var tmpfunc = SUB_GLB.callbackdb[xread[0].funcid];
			var tmpid = xread[0].funcid
		
			delete SUB_GLB.callbackdb.tmpid;
		
			if (tmpfunc !== undefined && tmpfunc != null){
				delete xread[0].funcid;
				setTimeout(tmpfunc, 0, xread);
			}
		}
	
		reader.readAsText(xblob);
	
	} else if (xblob.type.indexOf("text") == 0 || 
				xblob.type.indexOf("application") == 0){
		var reader = new FileReader();
		reader.onload = function(){
//				      alert("Blob : " + reader.result);
//							console.log("Uri  : "+ data.uri)
			
				if (xblob.type.indexOf("html") > 0 ) {
				 rcvhtml = $.htmlDoc( reader.result );

				 self.filecnt = 0;
			 
// Clear image tags
				 self.clearimgsrc(rcvhtml);
			 
// Transfer attributes							 
				 $("body").attrs(rcvhtml.find('body').attrs());
				 $("head").attrs(rcvhtml.find('head').attrs());
				 $("html").attrs(rcvhtml.filter('html').attrs());
			 
				 self.processHead(rcvhtml);
				 return;
			 
				} else if (xblob.type.indexOf("javascript") > 0 ||
						xblob.type.indexOf("ng-template") > 0) {
					var rmsrc = self.cleanURI(data.uri)
					var scrpt = rcvhtml.find('head').children('script[src$="'+rmsrc+'"]')
					scrpt.removeAttr("src")				
					scrpt.text(reader.result);
					self.filecnt--;
					self.loadhead(self.filecnt, rcvhtml);
					
				} else if (xblob.type.indexOf("css") > 0) {
					
					var rmsrc = self.cleanURI(data.uri)
					var linkcss = rcvhtml.find('head').children('link[href$="'+rmsrc+'"]')
				
	        		var locurl = window.URL || window.webkitURL;
	        		var hrefurl= locurl.createObjectURL(xblob);
//				console.log("for css data.uri : "+data.uri+"  Cleaned : "+rmsrc+"   hrefurl : "+hrefurl)
					linkcss.attr("href", hrefurl)
					self.filecnt--;
					self.loadhead(self.filecnt, rcvhtml);
					
				} else if (xblob.type.indexOf("json") > 0) {
					var xres = reader.result;
					
					 var api = eval( '( ' + xres + ' )' );
					 $( document ).trigger( "apiready", [ api ] );				 
				}
	    	};
		
//	console.log("data : "+ data.data)
			reader.readAsText(xblob)
		
		} else if (xblob.type.indexOf("image") == 0) {
// HTML will be inserted before any image manipulation
			var datatag
    		var url = window.URL || window.webkitURL;
    		var imgurl = url.createObjectURL(xblob);
		
		 $.each($('img').get(), function(){
			 datatag = $.data(this, SUB_GLB.LOCALSRC)
		 
			 if (datatag !== undefined) {
					 	console.log("img data : " + datatag + " uri : " + data.uri)

				if (data.uri.indexOf(datatag) == 0){
			 		this.src=imgurl
			 	}
			}
		})
		
	} else if (xblob.type.indexOf("audio") == 0) {
			//Audio
//		console.log("Audio blob size : " + xblob.size + "  Type : "+xblob.type);
	
		this.endStream(data.uri);
	} else if (xblob.type.indexOf("subfile") == 0){
		
		var reader = new FileReader();
		var xtype = xblob.type;
		
		reader.onload = function(){

			var tmpid = xtype.split('/')[1];
			var tmpfunc = SUB_GLB.callbackdb[tmpid];
//			console.log("In subfile : "+ tmpid + " tmpfunc : "+tmpfunc);
			
			delete SUB_GLB.callbackdb.tmpid;
		
			if (tmpfunc !== undefined && tmpfunc != null){
				setTimeout(tmpfunc, 0, reader.result);
			}
		}
	
		reader.readAsText(xblob);
	}
	
	this.clearRcvBuffer(data.uri);
}
	
	
Subcon.prototype.processHead = function(rcvhtml){
		

/* This is a hack to force remote calls to behave syncronously
	This should be looked at later. requires all sync remote calls to be at
	the beginning of the <head>
*/

var headtags = rcvhtml.find('head').children('script').get();
var dump = false;
var thissrc;
var self = this;

//alert("In processHead : " + rcvhtml.find('head').children('script').get(1).outerHTML);

 	$.each(headtags, function(){
		
		this_src = this.getAttribute("src")
// console.log("script head tags attr src : "+ this_src)
		if (this_src != null && this_src.length > 0){	 
				 if (blockInclude(this_src)) {
				 	this.parentNode.removeChild(this);
				 } else if (islocalfile(this.src)){
					 self.filecnt++;
//					 console.log("extract head tags src : "+ this.src)
					 this.setAttribute("sub_src", this_src);
					 
					 var mimetp = "";
					 var xtyp = this.getAttribute("type");
					 if (xtyp != null && xtyp.indexOf("ng-template") > 0){
									 console.log("set Angular mimetype")
							this.setAttribute("id", this_src);
							mimetp = "text/ng-template";
					 }

					 self.conn.send(xhrCall(self.fullPath(this_src),null,null,null,mimetp));
				 } else {
					 $.holdReady( true );
	//				 console.log("remote before javscript send : " + this.src +
	//			 "  filecnt : " + self.filecnt)
					 
					this.setAttribute("sub_src", this.src);
					var tmpsrc = this.src
					this.removeAttribute("src");
					
				 	$.getScript(tmpsrc, function(){
						$.holdReady( false );

						if (self.filecnt <= 0) {
							setTimeout(self.processHead.bind(self), 0, rcvhtml)
						}
					
					}).fail(function(err,str){
						console.log("error getScript : " + str)
					})
					
					if (self.filecnt <= 0) {
						dump = true
						return false;
					}
		 	 	}
			}
		})

		if (!dump) {
			 headtags = rcvhtml.find('head').children('link[rel="stylesheet"]').get();
			 $.each(headtags, function(){
				 if (islocalfile(this.href)){
					 self.filecnt++;
					 self.conn.send(xhrCall(self.fullPath(this.getAttribute("href"))));
				 }
			 })
			 
			 this.loadhead(this.filecnt, rcvhtml);
		 }
}
	
	
Subcon.prototype.cleanURI = function(datauri) {
		
	return datauri.substr(datauri.indexOf(this.appName)+this.appName.length + SUB_GLB.APPURL.length)
}
	
	
Subcon.prototype.clearimgsrc = function(rcvhtml) {

	var self = this;
	
	 $.each(rcvhtml.find('img').get(), function(){
//			 console.log("clear img src : " + this.src)
		 if (this.src.length > 1 && islocalfile(this.src)){
			 $.data(this, SUB_GLB.LOCALSRC, self.fullPath(this.getAttribute("src")))
		 	this.removeAttribute("src")
		 } else if (this.src == "#") this.removeAttribute("src");
	 })
	 
	 //Audio
	 $.each(rcvhtml.find('source').get(), function(){
		 if (this.src.length > 1 && islocalfile(this.src)){
			$.data(this, SUB_GLB.LOCALSRC, self.fullPath(this.getAttribute("src")))
		 	this.removeAttribute("src")
		 } else if (this.src == "#") this.removeAttribute("src");
	 })
}


Subcon.prototype.fetchimgsrc = function(){
	var self = this;
	
 $.each($('img').get(), function(){
	 if (! this.hasAttribute("src") && 
	 				$.data(this, SUB_GLB.LOCALSRC) !== undefined){
		 self.conn.send(xhrCall($.data(this, SUB_GLB.LOCALSRC)));
	 }
 })
 
 $.each($('source').get(), function(){
	 if (! this.hasAttribute("src") && 
	 				$.data(this, SUB_GLB.LOCALSRC) !== undefined){
		 self.conn.send(xhrCall($.data(this, SUB_GLB.LOCALSRC)));
	 }
 })
}



	
Subcon.prototype.loadhead = function(filecnt, rcvhtml) {
	var tmp = [];
	var i = 0;
	if (this.filecnt == 0) {
		// This cleans up the spinner etc may not be best
		
		clearspinner();
			
		$('head').append(rcvhtml.find('head').children())
		$('body').append(rcvhtml.find('body').children());
		
		this.fetchimgsrc();
		
		$(function(){
			$("script[sub_src]").empty();
		})
		$.holdReady( false );
	}
}
	

Subcon.prototype.driveStream = function() {
	
	var self = this;
	
 $.each($('source').get(), function(){
	  console.log("DriveStream tag: " + this.src + "  data : "+ $.data(this, SUB_GLB.LOCALSRC))
	 if (! this.hasAttribute("src") && $.data(this, SUB_GLB.LOCALSRC) !== undefined &&
 					self.bufferStart($.data(this, SUB_GLB.LOCALSRC))) {
						
						this.parentNode.removeEventListener("ended", self.streamEnd);
						self.playstream(this, $.data(this, SUB_GLB.LOCALSRC))
						this.parentNode.addEventListener("ended", self.streamEnd);
	 }
 })
}


Subcon.prototype.clearRcvBuffer = function(bkey){
	this.rcvbuffer[bkey] = null;
}


Subcon.prototype.bufferStart = function(buffkey) {
	
	var xblock = this.rcvbuffer[buffkey].block;
	var tot = 0;
	
	for (i=0; i<xblock.length; i++){
		tot = tot + xblock[i].length;
	}
	return(tot > 500000);
}


Subcon.prototype.playstream = function(el, buffkey) {
	var timespot;
	var url = window.URL || window.webkitURL;
	var timedelay = 1000;
	var audurl;

		el.parentNode.pause();
		timespot = el.parentNode.currentTime;
//		console.log("Paused time  : " + timespot)
	
		if (el.src !== undefined && el.src.length > 0) {
//			console.log("In revoke");
			url.revokeObjectURL(el.src);
		} else {
			timedelay = 0;
		}
		
		audurl = url.createObjectURL(new Blob(this.rcvbuffer[buffkey].block,
									 	{type : this.rcvbuffer[buffkey].type}));
 		el.src=audurl;
	
		setTimeout(function(){
		el.parentNode.load();
		el.parentNode.currentTime = timespot;
		el.parentNode.play();	
		}, timedelay)
}



Subcon.prototype.streamEnd = function(){

	var self = this;
	
	$.each($(this).children('source'), function(){
		if ($.data(this, SUB_GLB.LOCALSRC) !== undefined){
			self.playstream(this, $.data(this, SUB_GLB.LOCALSRC))
		}
	})
}


Subcon.prototype.endStream = function(file) {
	
	var self = this;
	
 $.each($('source').get(), function(){
	 if ($.data(this, SUB_GLB.LOCALSRC) !== undefined &&
 			$.data(this, SUB_GLB.LOCALSRC).indexOf(file) == 0) {
				this.parentNode.removeEventListener("ended", self.streamEnd);
				self.playstream(this, $.data(this, SUB_GLB.LOCALSRC))
	 }
 })
}


Subcon.prototype.getdbname = function(){
		
	var xname = this.appPath.indexOf(SUB_GLB.SYS_DIR) == 0  ? SUB_GLB.DB_SYS : SUB_GLB.DB_USR;
	return (xname + this.appName);
}


Subcon.prototype.fullPath = function(locpath){
	
	return(this.appPath + "/" + locpath);
}


Subcon.prototype.funcID = function(func){
	
	var funcidstr = SUB_GLB.callkey();
	
	SUB_GLB.callbackdb[funcidstr] = func;
	return(funcidstr);
}


function processimg(el, imgsrc){
	
	if (imgsrc != null){
		$.data(el, SUB_GLB.LOCALSRC, Subcon.subrtc.default.fullPath(imgsrc))
	}
	Subcon.subrtc.default.conn.send(xhrCall(Subcon.subrtc.default.fullPath(imgsrc)))
}



function insertDB(table, values, func, password, subrtc) {
	
	if (values == null || Object.keys(values).length == 0) {
		alert("Error: Insert values is empty")
		return;
	}
	
	if (password == null) password = "";
	if (subrtc == null) subrtc = Subcon.subrtc.default;
	
	var sqlpk = {db: subrtc.dbname, table: table, values: values, funcid: subrtc.funcID(func), password: password}

	subrtc.conn.send(xhrCall('api/insertDB', 'sqlpk='+ 
			encodeURIComponent(JSON.stringify(sqlpk)), 0, "POST"))
}


function queryDB(qstr, args, limits, func, subrtc) {
	
	if (args == null) args = {};
	if (limits == null) limits = {};
	if (subrtc == null) subrtc = Subcon.subrtc.default;
	
	var sqlpk = {db: subrtc.dbname, qstr: qstr, args: args,
					limits: limits, funcid: subrtc.funcID(func)}
	
	subrtc.conn.send(xhrCall('api/queryDB','sqlpk='+ 
			encodeURIComponent(JSON.stringify(sqlpk))))
}


function updateDB(table, values, qstr, args, func, password, subrtc) {
	
	if (values == null || Object.keys(values).length == 0) {
		alert("Error: Update values is empty")
		return;
	}
	
	if (qstr == null) { qstr = "";}
	if (password == null) password = "";
	if (subrtc == null) subrtc = Subcon.subrtc.default;
	
	var sqlpk = {db: subrtc.dbname, table: table, values: values,
						qstr: qstr, args: args, funcid: subrtc.funcID(func), password: password}

	subrtc.conn.send(xhrCall('api/updateDB', 'sqlpk='+ 
			encodeURIComponent(JSON.stringify(sqlpk)), 0, "POST"))
}


function removeDB(table, qstr, args, func, password, subrtc) {
	
	if (args == null || Object.keys(args).length == 0) {
		alert("Error: removeDB args is empty")
		return;
	}
	
	if (qstr == null) { qstr = ""	}
	if (password == null) password = "";
	if (subrtc == null) subrtc = Subcon.subrtc.default;
	
	var sqlpk = {db: subrtc.dbname, table: table, qstr: qstr,
						args: args, funcid: subrtc.funcID(func), passord: password}
	
	subrtc.conn.send(xhrCall('api/removeDB', 'sqlpk='+ 
			encodeURIComponent(JSON.stringify(sqlpk))))
}


function getMenu(func){
	
	Subcon.subrtc.default.conn.send(xhrCall('api/getMenu/' + Subcon.subrtc.default.funcID(func)));
}


function testPassword(passwd, token, func){
	Subcon.subrtc.default.conn.send(xhrCall('api/testPassword/'+ passwd + '/' + (token ? 'T' : 'P') + '/' + 
			Subcon.subrtc.default.funcID(func)));
	
}


function getToken(func){
	
//	Subcon.subrtc.default.conn.send(xhrCall('api/getToken/' + Subcon.subrtc.default.funcID(func)));
	
	subrtc.conn.send(xhrCall('api/getToken/' + subrtc.funcID(func)));
}


function getsubFile(xfile, func){
	Subcon.subrtc.default.conn.send(xhrCall(subCon.fullPath(xfile), null, 0, "GET", 
			"subfile/" + Subcon.subrtc.default.funcID(func)));
}


function remotecall(subname, path, func, args, rtnval){
// path like sys/TestSite

	var pathary = splitpath(path);
	var fld = subname+"_"+pathary[0]+pathary[1];
	
//	console.log("Remote  call fld : " + fld);
	if (Subcon.subrtc[fld] === undefined ||
			Subcon.subrtc[fld].api === undefined) {
		
		$( document ).on( "apiready", {
		    subpath: fld
		}, function( event, api ) {
			$( document ).off( "apiready" );
			Subcon.subrtc[event.data.subpath].api = api;
			Subcon.subrtc[event.data.subpath].api[func](args, rtnval,
	 		Subcon.subrtc[event.data.subpath].obj);
			});
	
			Subcon.subrtc[fld] = {};
			Subcon.subrtc[fld].obj = new Subcon(path);
			Subcon.subrtc[fld].obj.peerServerOn(subname, path + "/js/api.json");
		} else {
			 Subcon.subrtc[fld].api[func](args, rtnval, Subcon.subrtc[fld].obj)
		}
}


function remoteclose(subname, path){
// path like sys/TestSite
		
	if (subname == null || path == null){

		var propValue;
		for(var propName in Subcon.subrtc) {	    
			if (!(propName == "default") && 
				(subname == null || propName.startsWith(subname+"_"))) {
				
//		    	console.log("Removing remoteclose link : " + propName);
				propValue = Subcon.subrtc[propName];			

				if (! propName.startsWith(SUB_GLB.LOCAL+"_")) {
				  	propValue.obj.peerShutDown();
				}
				delete propValue;	
			}
		}
	} else {
		var pathary = splitpath(path);
		var fld = subname+"_"+pathary[0]+pathary[1];
	
		if (! fld.startsWith(SUB_GLB.LOCAL+"_")) {
		  	Subcon.subrtc[fld].obj.peerShutDown();
		}
		delete Subcon.subrtc[fld];	
		return true;
	}	
}
		

function clearspinner(){
	
	$("#subinitrm").remove();
}


function blockInclude(str){
		
	return (str.indexOf("dev_subsect.js") >= 0 );
}


function xhrCall(file, args, cnt, type, mimetp){
	
	if (!args) args = "";
	if (!cnt) cnt = 0;
	if (!type) type = "GET";
	if (!mimetp) mimetp = "";

	return({type: type, file: file, args: args, cnt: cnt, mimetp: mimetp});
}


function islocalfile(pathstr){
	return(window.location.host.length > 0 && pathstr.indexOf(window.location.host) >= 0)
}


function getParam(val) {

    tmp = [];
    var items = location.search.substr(1).split("&");
    for (var index = 0; index < items.length; index++) {
        tmp = items[index].split("=");
        if (tmp[0] === val) return(tmp[1]);
    }
    return "";
}	


function splitpath(apath) {
	apath = apath.trim();
	if (apath.startsWith("/")) apath = apath.substr(1);
	return(apath.split("/"));
}


SUB_GLB.callkey = (function () {
    var dt = new Date();
	var cnt = 0;

    return function () {return (++cnt).toString() + "F" + (dt.getSeconds() * 1000 + dt.getMilliseconds());}
})();


function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = cname + "=" + JSON.stringify(cvalue) + "; " + expires + "; path=/; domain=.subsect.net";
}


function getCookie(cname) {
	
    var name = cname + "=";
    var ca = document.cookie.split(';');
	
    for(var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return JSON.parse(c.substring(name.length, c.length));
        }
    }
    return {};
}


function deleteCookie(cname) {
	
	var xdel = cname+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; domain=.subsect.net";
	console.log("Deleting cookie : " + xdel)
	document.cookie = xdel;
}
